-------------------------------------------------------------------------------
--                           CyberResidencesOCL.use
-------------------------------------------------------------------------------

model CyberResidences



enum Category {
    economy,
    standard,
    premium,
    prestige
}


enum Gender {
    male,
    female
}


class Residence
attributes
    name     : String
    floorMin : Integer
    floorMax : Integer
    category : Category
    maxNbOfFreeUnits : Integer -- @derived
    avgRate : Real             -- @derived
operations
    -- Set of bedrooms of the residence.
    bedrooms() : Set(Bedroom) =
        rooms->select(oclIsKindOf(Bedroom))->oclAsType(Set(Bedroom))
    -- Set of useful bedrooms.
    usefulBedrooms() : Set(Bedroom) =
        bedrooms()->select(not isOutOfOrder)
    -- Set of residence bathrooms
    bathrooms() : Set(Bathroom) =
        rooms->select(oclIsKindOf(Bathroom))->oclAsType(Set(Bathroom))
end


class Room
attributes
    number : Integer
    floor : Integer -- @derived
    isOutOfOrder : Boolean
end

class Bedroom < Room
attributes
    nbOfSingleBeds : Integer
    nbOfDoubleBeds : Integer
    rate : Real
	isNonSmoking : Boolean
	nbOfUnits : Integer --@derived
end


class Bathroom < Room
attributes
    isOnTheLanding : Boolean
end

class Person
attributes
    name : String
	age : Integer
	gender : Gender
end

class Resident < Person
attributes
	isSmoker : Boolean
end

class Tenant < Resident
attributes
	paidRate : Real --@derived
end

class Discount
attributes
	percentage : Integer
	label : String
end

composition ContainsRooms between
Residence[1] role residence
Room[*] role rooms
end

composition HasDiscounts between
Rent[1] role rent
Discount[*] role discounts
end

associationclass Rent between
Bedroom[1..*] role rentedBedrooms
Tenant[0..1] role tenant
attributes
discount : Real --@derived
rate : Real --@derived
end

association IsOccupiedBy
between
  Bedroom[1] role occupiedRoom
  Resident[*] role occupants
end

association IsInBedroom
between
  Bathroom[0..3] role bathrooms
  Bedroom[0..1] role bedroom
end

association IsMarriedWith
between
  Resident[0..1]
  Resident[0..1] role consort
end

association IsTutoredBy
between
  Resident[*] role tutored
  Resident[0..2] role tutors
end


constraints

-------------------------------------------------------------------------------
-- TODO                              aboooConditions
-------------------------------------------------------------------------------
-- Conditions for granting a discount "All Bathrooms Out Of Order" (ABOOO).
-- Note Easy. Use 'one'. Should world with 'xxxPercentage'

-- context Rent inv aboooConditions:
    -- A discount is given for bedrooms that have all bathrooms out of
    -- order. The label of this type of discount is 'BROOO50'. This
    -- rule does not apply in economy residences


-------------------------------------------------------------------------------
-- DONE                               aboooPercentage
-------------------------------------------------------------------------------
-- Percentage of "ABOOO" discount according to residence category.
-- Not Easy. Should work with the corresponding invariant 'xxxConditions'
    -- ABOO discounts are equal to 50%.

context Discount inv aboooPercentage:
   self.label = 'BROO50' implies self.percentage = 50


-------------------------------------------------------------------------------
-- DONE                                 adultMarried
-------------------------------------------------------------------------------
-- Only adult married.
-- Easy. Use 'implies'
-- To be registered as married, resident must be adult.

context Resident inv adultMarried:
    self.consort->notEmpty() implies
        self.age >= 18


-------------------------------------------------------------------------------
-- DONE                                adultTenant
-------------------------------------------------------------------------------
-- Tenants are adults.
-- Easy
-- The minimal age to rent a bedroom is 18 years old.

context Tenant inv adultTenant:
    self.age >= 18


-------------------------------------------------------------------------------
-- DONE                            allPrestigeBathrooms
-------------------------------------------------------------------------------
-- Invariant about all bathrooms for 'prestige' residence.
-- Medium. use 'implies'.
-- Residences of category prestige have in each bedroom at least
-- the same number of bathroom that the number of beds.

context Residence inv allPrestigeBathrooms:
   self.category = Category::prestige implies self.bedrooms()->forAll(x | x.bathrooms->size()
 = (x.nbOfSingleBeds + x.nbOfDoubleBeds))


-------------------------------------------------------------------------------
-- DONE                                atLeastABed
-------------------------------------------------------------------------------
-- At least one bed for useful bedrooms.
-- Easy. Use implies.
-- Bedrooms that are not out of order must have at least one bed.

context Bedroom inv atLeastABed:
    self.isOutOfOrder = false implies
        self.nbOfSingleBeds >= 1 or self.nbOfDoubleBeds >= 1


-------------------------------------------------------------------------------
--  DONE                            atLeastOneAdult
-------------------------------------------------------------------------------
-- At least one adult per room.
-- Easy. Use 'implies'
-- At least one adult must be presented in all occupied rooms.

context Bedroom inv atLeastOneAdult:
self.occupants->size() <> 0 implies self.occupants->select(age>=18)->notEmpty()

-------------------------------------------------------------------------------
-- DONE                              childNonSmoking
-------------------------------------------------------------------------------
-- Non smoking child.
-- Easy
-- Children are always declared as non smoker.

context Resident inv childNonSmoking:
    self.age < 18 implies
        self.isSmoker = false


-------------------------------------------------------------------------------
-- DONE                                childTutored
-------------------------------------------------------------------------------
-- Child tutored.
-- Medium

context Resident inv childTutored:
   self.age < 18 and self.occupiedRoom.residence.category <> Category::prestige implies self.tutors->notEmpty()
    -- Resident that are less than 18 years old must have at least one
    -- tutor, apart in prestige residences where this rule does not
    -- apply.


-------------------------------------------------------------------------------
-- DONE                             cumulatedDiscounts
-------------------------------------------------------------------------------
-- Limit of cumulated discounts.
-- Easy. Use 'sum'
-- No room will have more that 70% of dicounts cumulated.

context Rent inv cumulatedDiscounts:
    self.discounts.percentage->sum() <= 70

-------------------------------------------------------------------------------
-- TOCHECK                               deriveAvgRate
-------------------------------------------------------------------------------
-- Derivation of the avgRate attribute.
-- Medium
-- The average rate of a residence is the total revenue of the
-- residence divided by the number of occupants. Tutored residents
-- do not count in this rule.


context Residence inv deriveAvgRate:
   self.avgRate = self.bedrooms().rate->sum() / self.bedrooms().occupants->select(tutors->notEmpty())->size()

-------------------------------------------------------------------------------
-- DONE                               deriveDiscount
-------------------------------------------------------------------------------
-- Derivation of the attribute discount.
-- Easy
-- The discount for a rent, is the rate of the bedroom multiplied
-- by the sum of percentages of all discounts.

context Rent inv deriveDiscount:
    self.discount = self.rentedBedrooms.rate * self.discounts.percentage->sum()

-------------------------------------------------------------------------------
-- DONE                                deriveFloor
-------------------------------------------------------------------------------
-- Derivation of the attribute floor.
-- Easy
-- The floor number correspond to the first digits of the room
-- number, where the last two digits are removed. For instance the
-- room 634 is at the floor 6.

context Room inv deriveFloor:
    self.floor = self.number div 100

-------------------------------------------------------------------------------
-- DONE                            deriveIsOnTheLanding
-------------------------------------------------------------------------------
-- Derivation of isOnTheLanding attribute.
-- Easy
-- A bathroom is said to be on the landing if it is not in a
-- bedroom.

context Bathroom inv deriveIsOnTheLanding:
    self.isOnTheLanding implies
        self.bedroom->isEmpty()

-------------------------------------------------------------------------------
-- TOCHECK                           deriveMaxNbOfFreeUnits
-------------------------------------------------------------------------------
-- Derivation of maxNbOfFreeUnits attribute.
-- Easy
-- The maximum number of free units is equal to the maximum number
-- of places in beds of all rooms of the residence.

context Residence inv deriveMaxNbOfFreeUnits:
    self.maxNbOfFreeUnits = self.bedrooms().nbOfSingleBeds->sum() + self.bedrooms().nbOfDoubleBeds->sum() * 2

-------------------------------------------------------------------------------
-- DONE                              deriveNbOfUnits
-------------------------------------------------------------------------------
-- Derivation of nbOfUnits attribute.
-- Easy
-- The number of units of a bedroom is the maximum number of
-- people that can fit within the bedroom assuming that all places
-- in all beds are full.

context Bedroom inv deriveNbOfUnits:
    self.nbOfUnits = self.nbOfSingleBeds + self.nbOfDoubleBeds * 2

-------------------------------------------------------------------------------
-- TODO                               derivePaidRate
-------------------------------------------------------------------------------
-- Derivation of the attribute paidRate.
-- Not Easy. Use 'if ... then ... else ... endif'   and
-- 'let groupFloors : Set(Integer) = ... in ...'

-- context Tenant inv derivePaidRate:
    -- The total amount paid by a tenant is the sum of rent rates for
    -- all bedrooms rented. If the members of his or her group is
    -- spread over more than one floor, then 20€ of reduction will
    -- automatically be deduced.


-------------------------------------------------------------------------------
-- DONE                                 deriveRate
-------------------------------------------------------------------------------
-- Derivation of the attribute rate.
-- Easy
-- The rate of a rent corresponds to the regular rate for the room
-- minus the discount.

context Rent inv deriveRate:
    self.rate = self.rentedBedrooms.rate - self.discount

-------------------------------------------------------------------------------
-- DONE                              domainPercentage
-------------------------------------------------------------------------------
-- Domain of percentage attribute.
-- Easy
-- The percentage is a value between 1 and 100.

context Discount inv domainPercentage:
    self.percentage<=100 and self.percentage>=1



-------------------------------------------------------------------------------
-- DONE                         enoughBathroomsInPrestige
-------------------------------------------------------------------------------
-- At least as many bathrooms than beds for prestige residence.
-- Easy. Use implies.
-- In a prestige residence, the number of private bathrooms is at
-- least the same as the number of beds in each bedroom.

context Bedroom inv enoughBathroomsInPrestige:
   self.residence.category= Category::prestige implies self.residence.bathrooms()->size()>=(self.nbOfSingleBeds+nbOfDoubleBeds)


-------------------------------------------------------------------------------
-- DONE                           floorBetweenMinAndMax
-------------------------------------------------------------------------------
-- Floor between minimum and maximum floors.
-- Easy
-- The floor of a room is between the minium and maximum floor of
-- the residence.

context Room inv floorBetweenMinAndMax:
   self.floor >= self.residence.floorMin and self.floor <= self.residence.floorMax
   

-------------------------------------------------------------------------------
-- DONE                                 floorOrder
-------------------------------------------------------------------------------
-- Order between floorMin and floorMax attributes.
-- Easy
-- The maximum floor is at higher or at the same level that the
-- minimum floor of the residence.

context Residence inv floorOrder:
    self.floorMax>=self.floorMin


-------------------------------------------------------------------------------
-- DONE                                labelUnique
-------------------------------------------------------------------------------
-- Uniqueness of labels with respect to rents.
-- Easy. Use 'unique'
-- All discounts associated to a rent have distinct labels.

context Rent inv labelUnique:
    self.discounts->isUnique(label)


-------------------------------------------------------------------------------
-- DONE                          marriageAntiReflexivity
-------------------------------------------------------------------------------
-- Anti-reflexivity of marriage relationship.
-- Easy
-- A resident cannot mary with himself or herself.
    
context Resident inv marriageAntiReflexivity:
   self.consort <> self

-------------------------------------------------------------------------------
-- DONE                            marriageInSameGroup
-------------------------------------------------------------------------------
-- Consorts in the same group.
-- Medium
    -- A resident and his or her consort occupies a room of the same
    -- group.

context Resident inv marriageInSameGroup:
   self.consort.occupiedRoom.tenant = self.occupiedRoom.tenant  
      
-------------------------------------------------------------------------------
-- DONE                              marriageSymmetry
-------------------------------------------------------------------------------
-- Symmetry of marriage relationship.
-- Easy

	context Resident inv marriageSymmetry:
		self.consort->notEmpty() implies self = self.consort.consort
    -- If a resident is declared to be the consort of another
    -- resident, then the opposite is true as well.


-------------------------------------------------------------------------------
-- DONE                             noBedroomOverload
-------------------------------------------------------------------------------
-- No bedroom overloaded.
-- Medium
    -- There must be no more people in a bedroom that the number of
    -- units of this bedroom. Children up to 3 years old are not
    -- counted in this rule.

context Bedroom inv noBedroomOverload:
self.nbOfUnits <= self.occupants->select(age<=3)->size()

-------------------------------------------------------------------------------
-- DONE                           noEmptyRentedBedrooms
-------------------------------------------------------------------------------
-- Rented bedrooms not empty.
-- Easy. Use 'implies'

 context Bedroom inv noEmptyRentedBedrooms:
	self.tenant->notEmpty() implies
			self.occupants->notEmpty()
    -- All rented bedrooms are occupied by at least one occupant.


-------------------------------------------------------------------------------
-- DONE                                 noSquaters
-------------------------------------------------------------------------------
-- Nobody in rooms not rented.
-- Easy. Use 'implies'

	context Bedroom inv noSquaters:
		self.occupants->notEmpty() implies
			self.tenant->notEmpty()
    -- Occupants must be exclusively in rooms that are rented by
    -- somebody.


-------------------------------------------------------------------------------
-- DONE                              noTutorForAdults
-------------------------------------------------------------------------------
-- No tutor for adults.
-- Easy

 context Resident inv noTutorForAdults:
	self.age > 17 implies
		self.tutors->isEmpty()
    -- Adults never have tutor.


-------------------------------------------------------------------------------
-- DONE                            oooBedroomsNotRented
-------------------------------------------------------------------------------
-- No rental of Out Of Order bedrooms.
-- Easy

 context Bedroom inv oooBedroomsNotRented:
	self.isOutOfOrder=true implies
		self.tenant->isEmpty()
    -- Bedrooms that are out of order cannot be rented.


-------------------------------------------------------------------------------
-- DONE                               oooIfPrestige
-------------------------------------------------------------------------------
-- Out of order bathroom implications if prestige. 
-- Medium. Use 'implies'
    -- In prestige residences, it is not acceptable to rent bedrooms
    -- with bathrooms that are out of order. So if a bathrom is marked
    -- as out of order, the corresponding bedroom is also marked as
    -- out of order.

context Bathroom inv oooIfPrestige:
   self.residence.category = Category::prestige and self.isOutOfOrder implies self.bedroom->notEmpty() and self.bedroom.isOutOfOrder

-------------------------------------------------------------------------------
-- TOCHECK                             rentInOneResidence
-------------------------------------------------------------------------------
-- Medium. Should be rather short.
-- <Enter note text here>
    -- For a given tenant, all rented bedrooms are in the same
    -- residence.

context Tenant inv rentInOneResidence:
   self.rentedBedrooms->forAll(rb1 | (self.rentedBedrooms->forAll(rb2 | rb2.residence = rb1.residence)))

-------------------------------------------------------------------------------
-- DONE                            sameNumberIfPrivate
-------------------------------------------------------------------------------
-- Same number if private.
-- Easy. Use 'implies'.

	context Bathroom inv sameNumberIfPrivate:
			self.isOnTheLanding= false implies
				self.bedroom.number=self.number

    -- All bathrooms that are not on the landing, that are
    -- private to a bedroom, have the same number of room as this
    -- bedroom.


-------------------------------------------------------------------------------
-- TODO                              sboooConditions
-------------------------------------------------------------------------------
-- Conditions for granting a discount "Some Bathrooms Out Of Order" (SBOOO).
-- Not Easy. Use 'one'. Should world with 'xxxPercentage'

-- context Rent inv sboooConditions:
    -- A discount if given for a bed room if there are "Some Bathrooms
    -- Out Of Order", that is for bedroom with at least one bathroom
    -- out of order, but at least one bathroom still available.  The
    -- label for this type of discount is SBOO. This type of discount
    -- does not apply on economy residences.


-------------------------------------------------------------------------------
-- DONE                              sboooPercentage
-------------------------------------------------------------------------------
-- Percentage of "SBOOO" discount according to residence category.
-- Not Easy. Should work with the corresponding invariant 'xxxConditions'
    -- In premium residences, SBOO discounts are equal to 25%. For
    -- standard category the discount is of 10%.

context Discount inv sboooPercentage:
   self.label = 'SBOO' implies 
   if self.rent.rentedBedrooms.residence.category = Category::standard then self.percentage = 10
   else if self.rent.rentedBedrooms.residence.category = Category::premium then self.percentage = 25 else true endif endif

-------------------------------------------------------------------------------
-- DONE                            smokingPremiumPolicy
-------------------------------------------------------------------------------
-- Smoking policy for premium residences.
-- Not easy
    -- In a premium residence a resident that specified that he or she
    -- is non smoker will never ever be place in a smoking room.

context Bedroom inv smokingPremiumPolicy:
   	self.residence.category = Category::premium implies self.occupants->forAll(x | not x.isSmoker implies self.isNonSmoking)
      

-------------------------------------------------------------------------------
-- DONE                           smokingPrestigePolicy
-------------------------------------------------------------------------------
-- No smoking is prestige.
-- Easy
-- There are no smoking rooms at all in residence of prestige.
context Bedroom inv smokingPrestigePolicy:
   self.residence.category = Category::prestige implies self.isNonSmoking 		



-------------------------------------------------------------------------------
-- DONE                             tenantInRentedRoom
-------------------------------------------------------------------------------
-- Room occupied by the tenant.
-- Medium. 
-- A tenant occupies one of the bedroom that he or she has rented.
    
context Tenant inv tenantInRentedRoom:
   self.rentedBedrooms->exists(occupants->exists(y|y=self))


-------------------------------------------------------------------------------
-- DONE                                 tutorAdult
-------------------------------------------------------------------------------
-- Tutors are adults.
-- Easy
-- A resident can not be the tutor of another resident if he or
-- she is not an adult.

	context Resident inv tutorAdult:
		self.age>17


-------------------------------------------------------------------------------
-- DONE                              tutorInSameGroup
-------------------------------------------------------------------------------
-- Tutors and tutored in one group.
-- Medium
    -- The tutors of a resident are in the same group that this
    -- resident. In other words they are all in the same group of
    -- rooms.
    
context Resident inv tutorInSameGroup:
   self.tutors->forAll(x | x.occupiedRoom.tenant = self.occupiedRoom.tenant)


-------------------------------------------------------------------------------
-- DONE                    uniqueNumberApartForPrivateBathroom
-------------------------------------------------------------------------------
-- Invariant on room numbering.
-- Medium
    -- All rooms have a distinct number, except private bathrooms.
    
context Residence inv uniqueNumberApartForPrivateBathroom:
   self.bathrooms().select(isOnTheLanding)->union(self.bedrooms())->isUnique(number)

